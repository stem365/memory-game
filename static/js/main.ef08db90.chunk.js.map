{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","handleClick","props","cardClickHandler","index","this","open","symbolToShow","value","className","style","backgroundColor","color","onClick","React","Component","CorrectnessLabel","correct","correctLabel","correctLabelColor","MainStates","App","handleChange","event","inputValue","target","handleContinueClick","state","mainState","getRandomCardPairs","setState","getRandomInt","min","max","Math","ceil","floor","random","emptyCardIndexArray","Array","length","randomIndex","cardIndex","cardContentsArray","splice","handleCardClick","i","console","log","firstCardOfPairPicked","totalPairsCount","pairsOpenAmout","firstCardOfPair","undefined","correctCount","boardsCompletedCount","totalBoardsCount","pairPickedCorrect","cardBoardLayout","cardsOpen","table","children","j","elementNumber","push","enableClick","correctValue","gameTotalsLayout","instructionText","correctLabelLayout","continueButtonLayout","lineHeight","buttonText","Button","margin","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef08db90.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nexport class Card extends React.Component {\n    handleClick = () => {\n        this.props.cardClickHandler(this.props.index);\n    };\n\n    render() {\n        // if card should be open\n        if (this.props.open) {\n            // show card value\n            this.symbolToShow = this.props.value;\n        }\n        else { // otherwise\n            // show backside\n            this.symbolToShow = '?';\n        }\n        return (<button className=\"card\" style={{ backgroundColor: this.props.color }} onClick={() => this.handleClick()}>\n            {this.symbolToShow}\n        </button>);\n    }\n}\n","import React from 'react';\nimport { Button } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Card } from './Card';\n\nconst cardsAmount = 8\n\nclass CorrectnessLabel extends React.Component {\n    render() {\n        if (this.props.correct === true) {\n            this.correctLabel = 'Correct!'\n            this.correctLabelColor = 'green'\n        } else {\n            this.correctLabel = 'Wrong!'\n            this.correctLabelColor = 'red'\n        }\n        return (\n            <strong>\n                <font color={this.correctLabelColor}>\n                    {this.correctLabel}\n                </font>\n            </strong>)\n    }\n}\n\nconst MainStates = {\n    MEMORIZING: 'memorizing',\n    ROUND_START: 'roundStart',\n    ROUND_ONGOING: 'roundOngoing',\n    ROUND_END: 'roundEnd',\n}\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mainState: MainStates.MEMORIZING,\n            firstCardOfPairPicked: undefined,\n            pairPickedCorrect: undefined\n        };\n        this.cardContentsArray = Array(cardsAmount)\n        this.totalPairsCount = 0\n        this.correctCount = 0\n        this.totalBoardsCount = 0\n        this.boardsCompletedCount = 0\n        this.correctValue = ''\n        this.correctLabel = ''\n        this.correctLabelColor = ''\n        this.pairsOpenAmout = 0\n\n        this.getRandomCardPairs()\n    }\n\n    handleChange = (event) => {\n        this.inputValue = event.target.value\n    }\n\n    handleContinueClick = (event) => {\n        if (this.state.mainState === MainStates.ROUND_END) {\n            this.getRandomCardPairs()\n            this.setState({ mainState: MainStates.MEMORIZING })\n        } else {\n            //this.totalPairsCount = this.totalPairsCount + 4\n            this.setState({ mainState: MainStates.ROUND_START })\n        }\n    }\n\n    getRandomInt = (min, max) => {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    getRandomCardPairs = () => {\n        // * set array of indexes of empty cards\n        let emptyCardIndexArray = Array(cardsAmount)\n        for (let index = 0; index < emptyCardIndexArray.length; index++) {\n            emptyCardIndexArray[index] = index\n        }\n\n        // start value, which is set anywhere in cards array\n        let value = 0\n\n        // while we have empty cards\n        while (emptyCardIndexArray.length > 0) {\n            // get random value within empty cards amount\n            const randomIndex = this.getRandomInt(0, emptyCardIndexArray.length - 1)\n            // get card index from empty cards array\n            const cardIndex = emptyCardIndexArray[randomIndex]\n            // set value in cards array\n            this.cardContentsArray[cardIndex] = {}\n            this.cardContentsArray[cardIndex].value = value\n            this.cardContentsArray[cardIndex].open = false\n            // remove corresponding empty cards array element\n            emptyCardIndexArray.splice(randomIndex, 1)\n            // if we have an even amount of empty cards\n            if (emptyCardIndexArray.length % 2 === 0) {\n                // increment card value\n                value++\n            }\n        }\n    }\n\n    handleCardClick = (i) => {\n        if (this.state.mainState === MainStates.MEMORIZING ||\n            this.state.mainState === MainStates.ROUND_END) {\n            return\n        }\n\n        console.log(\"card click: \" + i)\n\n        this.cardContentsArray[i].open = true\n\n        // if first card of a pair has been picked already\n        if (this.state.firstCardOfPairPicked) {\n            this.totalPairsCount++\n            this.pairsOpenAmout++\n            // if card value is same previous value\n            if (this.firstCardOfPair === this.cardContentsArray[i].value) {\n                // we do not have now first card of pair\n                this.firstCardOfPair = undefined\n                this.cardContentsArray[i].color = 'green'\n                this.correctCount++\n                // if 3 pairs have been opened correctly\n                if (this.pairsOpenAmout === 3) {\n                    this.correctCount++\n                    this.totalPairsCount++\n                    this.boardsCompletedCount++\n                    this.totalBoardsCount++\n                    this.pairsOpenAmout = 0\n                    this.setState({ mainState: MainStates.ROUND_END, pairPickedCorrect: true, firstCardOfPairPicked: false })\n                } else {\n                    // show CORRECT text\n                    this.setState({ mainState: MainStates.ROUND_ONGOING, pairPickedCorrect: true, firstCardOfPairPicked: false })\n                }\n            } else {\n                // show WRONG text\n                this.cardContentsArray[i].color = 'red'\n                this.totalPairsCount = this.totalPairsCount + this.pairsOpenAmout\n                this.pairsOpenAmout = 0\n                this.totalBoardsCount++\n                this.setState({ mainState: MainStates.ROUND_END, pairPickedCorrect: false, firstCardOfPairPicked: false })\n            }\n        } else { // do show anything, if no previous card (1st card of pair has been picked)\n            // this card is now first card of pair\n            this.firstCardOfPair = this.cardContentsArray[i].value\n            this.cardContentsArray[i].color = 'green'\n            this.setState({ mainState: MainStates.ROUND_ONGOING, firstCardOfPairPicked: true })\n        }\n    }\n\n    cardBoardLayout = (cardsOpen) => {\n        let table = []\n\n        // Outer loop to create parent\n        for (let i = 0; i < 2; i++) {\n            let children = []\n            //Inner loop to create children\n            for (let j = 0; j < 4; j++) {\n                const elementNumber = i * 4 + j\n                let open\n                // if user is memorizing\n                if (this.state.mainState === MainStates.MEMORIZING ||\n                    this.state.mainState === MainStates.ROUND_END) {\n                    // card must be open\n                    open = true\n                } else { // if user is not memorizing\n                    // check card openess individually\n                    open = this.cardContentsArray[elementNumber].open\n                }\n                children.push(<td>\n                    <Card\n                        value={this.cardContentsArray[elementNumber].value}\n                        index={elementNumber}\n                        color={this.cardContentsArray[elementNumber].color}\n                        open={open}\n                        enableClick={this.state.mainState === MainStates.ROUND_START}\n                        cardClickHandler={(elementNumber) => this.handleCardClick(elementNumber)}\n                    />\n                </td>)\n            }\n            //Create the parent and add the children\n            table.push(<tr>{children}</tr>)\n        }\n        return table\n    }\n\n\n    render() {\n        let cardsOpen = true\n        let gameTotalsLayout = ''\n        let instructionText = ''\n        // show continue button and correct labels only, if user has given input\n        let correctLabelLayout = ''\n        let correctResultLayout = ''\n        let continueButtonLayout = ''\n\n        if (this.totalPairsCount > 0) {\n            gameTotalsLayout =\n                <div>\n                    <p className=\"Boards-completed\">\n                        {this.boardsCompletedCount} of {this.totalBoardsCount} boards completed!\n                    </p>\n                    <p className=\"Pairs-correct\">\n                        {this.correctCount} of {this.totalPairsCount} pairs correct!\n                    </p>\n                </div>\n        }\n\n        if (this.state.mainState === MainStates.MEMORIZING) {\n            instructionText = 'Try to memorize the card pairs!'\n        } else if (this.state.mainState === MainStates.ROUND_START ||\n            this.state.mainState === MainStates.ROUND_ONGOING) {\n            instructionText = 'Pick Card Pairs!'\n        }\n        // show correctness text when round is ongoing AND 2nd card of pair is picked\n        if ((this.state.mainState === MainStates.ROUND_ONGOING &&\n            this.state.firstCardOfPairPicked === false) ||\n            this.state.mainState === MainStates.ROUND_END) {\n            let correct\n            if (this.state.pairPickedCorrect) {\n                correct = true\n            } else {\n                correct = false\n            }\n            correctLabelLayout =\n                <div style={{ lineHeight: 4 }}>\n                    <CorrectnessLabel correct={correct} />\n                </div>\n        }\n        // show continue button when user is memorizing or round ended\n        if (this.state.mainState === MainStates.MEMORIZING ||\n            this.state.mainState === MainStates.ROUND_END) {\n            let buttonText = 'Continue'\n            if (this.state.mainState === MainStates.MEMORIZING) {\n                buttonText = 'Start'\n            }\n            continueButtonLayout =\n                <div style={{ lineHeight: 2 }}>\n                    <Button\n                        style={{ margin: \"10px\" }}\n                        variant=\"primary\"\n                        onClick={this.handleContinueClick}>\n                        {buttonText}\n                    </Button>{' '}\n                </div>\n        }\n        return (\n            <div>\n                <header className=\"App-header\">\n                    <div className=\"Rectangle\">\n                        {gameTotalsLayout}\n                    </div>\n                    <div className=\"Instructions\">\n                        {instructionText}\n                    </div>\n                </header>\n                <body className=\"App-body\">\n                    <table>\n                        <tbody>\n                            {this.cardBoardLayout(cardsOpen)}\n                        </tbody>\n                    </table>\n                    {correctLabelLayout}\n                    {correctResultLayout}\n                    {continueButtonLayout}\n                </body>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}